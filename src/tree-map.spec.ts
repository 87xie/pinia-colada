import { describe, expect, it } from 'vitest'
import { EntryNode } from './tree-map'

describe('tree-map', () => {
  it('.get', () => {
    const tree = new EntryNode<string>()
    tree.set(['a', 'b', 'c'], 'abc')
    tree.set(['a', 'b', 'd'], 'abd')
    tree.set(['a', 'e'], 'ae')
    tree.set(['f'], 'f')
    expect(tree.get(['a', 'b', 'c'])).toBe('abc')
    expect(tree.get(['a', 'b', 'd'])).toBe('abd')
    expect(tree.get(['a', 'e'])).toBe('ae')
    expect(tree.get(['f'])).toBe('f')
  })

  it('.delete', () => {
    const tree = new EntryNode<string>()
    tree.set(['a', 'b', 'c'], 'abc')
    tree.set(['a', 'b', 'd'], 'abd')
    tree.set(['a', 'e'], 'ae')
    tree.set(['f'], 'f')
    tree.delete(['a', 'b', 'c'])
    expect(tree.get(['a', 'b', 'c'])).toBe(undefined)
    expect(tree.get(['a', 'b', 'd'])).toBe('abd')
    expect(tree.get(['a', 'e'])).toBe('ae')
    expect(tree.get(['f'])).toBe('f')
    tree.delete(['a', 'b', 'd'])
    expect(tree.get(['a', 'b', 'c'])).toBe(undefined)
    expect(tree.get(['a', 'b', 'd'])).toBe(undefined)
    expect(tree.get(['a', 'e'])).toBe('ae')
    expect(tree.get(['f'])).toBe('f')
    tree.delete(['a', 'e'])
    expect(tree.get(['a', 'b', 'c'])).toBe(undefined)
    expect(tree.get(['a', 'b', 'd'])).toBe(undefined)
    expect(tree.get(['a', 'e'])).toBe(undefined)
    expect(tree.get(['f'])).toBe('f')
    tree.delete(['f'])
    expect(tree.get(['a', 'b', 'c'])).toBe(undefined)
    expect(tree.get(['a', 'b', 'd'])).toBe(undefined)
    expect(tree.get(['a', 'e'])).toBe(undefined)
    expect(tree.get(['f'])).toBe(undefined)
  })
})
